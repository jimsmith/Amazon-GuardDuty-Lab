AWSTemplateFormatVersion: '2010-09-09'




Description: AWS CloudFormation Template to configure the AWS GuardDuty lab for the December 2017 SFO Security Loft.


Parameters:

  ResourceName:
    Type: String
    Default: GuardDuty-SFO-Loft-Lab1
    AllowedValues: 
      - GuardDuty-SFO-Loft-Lab1
    Description: Name of Resources created for this lab.

  EmailAddress:
    Description: Email Address for sending SNS notifications for GuardDuty Events
    Type: String
  
  MaliciousEIP:
    Type: String
    Description: Elastic IP that you created earlier 

  MaliciousEIPAllocationId:
    Type: String
    Description: Allocatin ID of the Elastic IP that you created earlier 

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  InstanceType:
    Description: Basic EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large   
    ConstraintDescription: must be a valid EC2 instance type.


Mappings:
  RegionMap: 
    us-east-1: 
      '64': ami-55ef662f
    us-east-2: 
      '64': ami-15e9c770
    us-west-1: 
      '64': ami-a51f27c5
    us-west-2: 
      '64': ami-bf4193c7


Resources:
  
  # Lambda Functions and Roles

  GuarddutyLabExecutionRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Ref ResourceName
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
            - sts:AssumeRole
      Path: '/'
      Policies: 
        - 
          PolicyName: LambdaRolePolicy
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
              - 
                Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateSecurityGroup
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:UpdateSecurityGroupRuleDescriptionsEgress
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:DescribeInstances
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:DescribeVpcs
                  - ec2:ModifyInstanceAttribute
                  - lambda:InvokeFunction
                  - cloudwatch:PutMetricData
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*

  CloudWatcherCore: 
    Type: AWS::Lambda::Function
    Properties: 
      Handler: cloudwatch_code.lambda_handler
      Role: !GetAtt GuarddutyLabExecutionRole.Arn
      Code: 
        S3Bucket: loftlab.gregmcconnel.net
        S3Key: gd-lab/code/cloudwatch_code.py.zip
      Runtime: python2.7
      Timeout: '60'
      TracingConfig:
        Mode: Active

  CloudWatcherAuthorizeSecurityGroupChange: 
    Type: AWS::Lambda::Function
    Properties: 
      Handler: cloudwatcher_authorize_securitygroupchange.lambda_handler
      Role: !GetAtt GuarddutyLabExecutionRole.Arn
      FunctionName: CloudWatcher_Authorize_SecurityGroupChange
      Code: 
        S3Bucket: loftlab.gregmcconnel.net
        S3Key: gd-lab/code/cloudwatcher_authorize_securitygroupchange.py.zip
      Runtime: python2.7
      Timeout: '60'
      TracingConfig:
        Mode: Active

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CloudWatcherCore.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GuardDutyEvent.Arn

  # Cloudwatch Events
  
  GuardDutyEvent: 
    Type: AWS::Events::Rule
    Properties: 
      Description: GuardDuty Event
      EventPattern: 
        source:
        - aws.guardduty
        detail:
          type:
          - UnauthorizedAccess:EC2/MaliciousIPCaller.Custom
      State: ENABLED
      Targets: 
        - 
          Arn: !GetAtt CloudWatcherCore.Arn
          Id: CloudWatcherCore
        - 
          Arn: !Ref GuardDutySNSTopic
          Id: GuardDutySNSTopic
          InputTransformer:
            InputTemplate: '"The EC2 instance <instanceid> may be compromised and should be investigated. Go to https://us-west-2.console.aws.amazon.com/guardduty/home?region=us-west-2#/findings"'
            InputPathsMap:
              instanceid: $.detail.resource.instanceDetails.instanceId 

  GuardDutySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - 
        Endpoint: !Ref EmailAddress
        Protocol: email

  GuardDutySNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ID-GD-Lab
        Version: '2012-10-17'
        Statement:
        - Sid: SID-GD-Lab
          Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sns:Publish
          Resource: '*'
      Topics: 
      - !Ref GuardDutySNSTopic


  # VPC & EC2 Creation

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value: !Ref ResourceName
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref ResourceName
  
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId: !Ref VPC
  
  RouteTable:
    DependsOn:
      - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/26
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  
  SubnetAssoc:
    DependsOn:
      - Subnet
      - RouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Ref ResourceName
        -
          Key: Network
          Value: Public
  
  InboundPublicNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  
  OutboundPublicNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  
  SubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref PublicNACL
  
  TargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref ResourceName
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
  
  MaliciousInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: t2.micro
      ImageId: 
        Fn::FindInMap: 
          - RegionMap
          - !Ref AWS::Region
          - '64'
      KeyName: !Ref KeyName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          GroupSet:
            - !Ref TargetSecurityGroup
          SubnetId: 
            Ref: Subnet
      Tags:
        - Key: Name
          Value: 
            Fn::Join:
              - ': '
              - [!Ref ResourceName, 'Malicious Instance']
            
  CompromisedInstance: 
    Type: AWS::EC2::Instance
    DependsOn: MaliciousInstance
    Properties: 
      InstanceType: t2.micro
      ImageId: 
        Fn::FindInMap: 
          - RegionMap
          - !Ref AWS::Region
          - '64'
      KeyName: !Ref KeyName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref TargetSecurityGroup
          SubnetId: 
            Ref: Subnet
      Tags:
          - Key: Name
            Value: 
              Fn::Join:
              - ': '
              - [!Ref ResourceName, 'Compromised Instance']
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -ex
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            echo BEGIN
            ping -i 60 -n ${MaliciousEIP}

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref MaliciousInstance
      AllocationId: !Ref MaliciousEIPAllocationId


# Outputs:
#  PublicIPofCompromisedInstance:
#    Description: The Public IP of the Compromised Instance
  #  Value:
  #    Fn::Join:
  #    - ", "
  #    - Fn::GetAtt:
  #      - AllSecurityGroups
  #      - Value